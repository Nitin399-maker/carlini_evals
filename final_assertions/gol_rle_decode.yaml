description: "This test case tests if the model can convert a Game of Life pattern represented in RLE format to a numpy array."
providers:
- id: openai:chat:o3-mini
  config:
    max_tokens: 8192
    reasoning_effort: high

defaultTest:
  assert: []
  vars: {}

tests:
  - description: "This test case tests if the model can convert a Game of Life pattern represented in RLE format to a numpy array"
    vars:
      prompt: |-
        Convert this game of life pattern

        26$13b2o$14bo$14bobo$15b2o14$31b2o$30b2o$32bo13$46b2o$45b2o$47bo13$61b
        2o$60b2o$62bo4$52b2o$52b2o$71bo$66b2ob3o$66bobobo$68bo$67b2o3$76b2o$
        60b3o12b2o10bobo$52b3o7bo14bo8bo2bo4bo$51bo3bo5bo10b2o11b2o5b2o$50bo5b
        o15bobo8b2o3bo8b2o$51bo3bo11b2o6bo9b2o10b2o$52b3o8b2obo2bo2bo2bo10bo2b
        o$52bo2bo7b2o2b2o6bo11bobo$53b3o16bobo$53b2obo15b2o$54bobo$55bo3$52b2o
        3b2o$52bobobobo$53b5o$54b3o$55bo7$54b2o$54b2o!

        to a numpy array. Call the function `rle_to_arr(string, h, w)`
        which should return a numpy array with .shape (h,w).
        Fill the array with 1s, and empty with 0 and return the code in ```python ``` literals, don't include "-" in your answer.
    assert:
      - type: python
        value: "file://gol_rle_decode.py:assert_rle_decode"

writeLatestResults: true
commandLineOptions:
  cache: true