description: "Test if the model can rewrite a given Python program into an equivalent C program."
providers:
  - {id: openrouter:openai/o4-mini-high, config: { max_tokens: 8192 }}

defaultTest:
  assert: []
  vars: {}

tests:
  - description: "Test if the model can rewrite a given Python program into an equivalent C program."
    vars:
      prompt: |-
        Here's a python program. Please rewrite it in c with the type signature float solve_dp(float* arr, int size, int lines_left)

        def solve_dp(graph, lines_left):
            n = len(graph)

            dp = [[[1e9 for _ in range(10)] for _ in range(lines_left + 1)] for _ in range(n + 1)]
            # Initialize how as -1 indicating no decision made
            how = [[[-1 for _ in range(10)] for _ in range(lines_left + 1)] for _ in range(n + 1)]

            for i in range(n, -1, -1):
                for j in range(lines_left + 1):
                    for k in range(10):
                        if i == n and j == 0:
                            dp[i][j][k] = 0
                        else:
                            # Option 1: don't take the line
                            if i < n and k < 9:
                                if dp[i + 1][j][k + 1] < dp[i][j][k]:
                                    dp[i][j][k] = dp[i + 1][j][k + 1]
                                    how[i][j][k] = k + 1  # Representing choosing not to take the line

                            # Option 2: take the line
                            if i < n and j > 0:
                                cost = graph[i] + (k - 8)**2
                                if cost + dp[i + 1][j - 1][0] < dp[i][j][k]:
                                    dp[i][j][k] = cost + dp[i + 1][j - 1][0]
                                    how[i][j][k] = 0  # Representing choosing to take the line

            # Reconstruct the solution

            i, j, k = 0, lines_left, 6
            taken_lines = []
            while i < n:
                if how[i][j][k] == 0:  # Chose to take the line
                    taken_lines.append(n - i)
                    i += 1
                    j -= 1
                    k = 0
                else:  # Chose not to take the line
                    i += 1
                    k += 1

            return dp[0][lines_left][6]
      assert:
        - type: python
          value: "file://convert_to_c.py:assert_c_rewrite"

# Persist for the web viewer
writeLatestResults: true
# Ensure caching stays on
commandLineOptions:
  cache: true