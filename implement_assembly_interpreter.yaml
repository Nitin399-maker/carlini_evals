description: "Test if the model can implement an interpreter for a new assembly language from a text description."
providers:
  - {id: openai:o3, config: { max_tokens: 8192 }}

defaultTest:
  assert: []
  vars: {}

tests:
  - description: "Test if the model can implement an interpreter for a new assembly language from a text description."
    vars:
      prompt: |-
        Here is the description of a new assembly language:

        * 8 registers (R1, R2, R3, R4, R5, R6, R7, R8) that can hold integers.
        * 1 flag that can hold a boolean value (True or False).
        * 100 memory addresses (0-99) that can hold integers.
        * 1 instruction pointer that points to the current instruction being executed.

        Each instruction is of the form
        OP ARG1 ARG2 ...
        where ARGn can be either a register (e.g., R1) or a constant (e.g., 10).

        Labels are written with a lowercase word followed by colon.

        The assembly language supports the following instructions:
        * SET Rx C: Assigns the value C to register Rx.
        * ADD Rx Ry Rz: Adds the values of Ry and Rz and stores the result in Rx.
        * (similarly for SUB, MUL, DIV, MOD)
        * EQ Rx Ry: Sets the flag to True if Rx and Ry are equal, False otherwise.
        * (similarly for NEQ, LT (Rx < Ry), LTE, GT, GTE)
        * INC/DEC Rx: Increments/Decrements the value of Rx by one.
        * JMP L: Jumps to label L unconditionally.
        * JT/JF (jump if true / jump if false) L: Jumps to label L if the flag is set or not set.
        * LOAD Rx M: Loads the value at memory address M into register Rx.
        * STORE Rx M: Stores the value of register Rx into memory address M.
        * HCF: Stops the program (with pizzazz)

        For example here is a program to compute the first 20 square numbers (1, 4, 9, 16, 25, ...):

        SET R1 0      // Counter for storing squares
        SET R2 1      // Number to square

        loop:
        MUL R3 R2 R2  // R3 = R2 * R2
        STORE R3 R1   // Store R3 at address R1
        INC R1        // Increment address
        INC R2        // Increment number
        SET R3 20
        EQ R1 R3      // Check if 20 squares are found
        JF loop       // If not 20 squares found yet, continue finding

        end:
        HCF           // Stop program

        Write me a python interpreter `evaluate(str)` that returns the resulting memory state after running the program. For example, `evaluate(program)` should return `[1, 4, 9, 16, 25, ...]` for the above program.
    assert:
      - type: python
        value: "file://implement_assembly_interpreter.py:get_assertion"

writeLatestResults: true
commandLineOptions:
  cache: true