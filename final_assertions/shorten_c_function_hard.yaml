description: "Test if the model can significantly shorten a repetitive C functions."
providers:
- id: openai:chat:o4-mini
  config:
    max_tokens: 8192
    reasoning_effort: high

defaultTest:
  assert: []
  vars: {}

tests:
  - description: "Test if the model can significantly shorten a repetitive C functions."
    vars:
      prompt: |-
        Code golf this function to be a lot shorter. You only get points if it's <200 bytes (not counting whitespace)and return the code in ```c literals and do not include hypen in code. Keep the function named `count`.
        ```c
        int count() {
            int ROWS = 8;
            int COLS = 8;
            int count = 0;
            for (int i = 0; i < 1<<16; i++) {
                long long unsigned int array = ((i & 0xf) << 9) | ((i & 0xf0) << (9 + 8 - 4)) | ((i & 0xf00) << (9 + 8 - 4 + 8 - 4)) | ((i & 0xf000) << (9 + 8 - 4 + 8 - 4 + 8 - 4));
                long long unsigned int init = array;
                long long unsigned int temp = array;
                for (int i = 1; i < ROWS - 1; i++) {
                    for (int j = 1; j < COLS - 1; j++) {
                        // Calculate bit positions
                        int pos = i * COLS + j;
                        int topPos = (i - 1) * COLS + j;
                        int leftPos = i * COLS + (j - 1);
                        int bottomPos = (i + 1) * COLS + j;
                        int rightPos = i * COLS + (j + 1);
                        // Get the values of the neighbors
                        int cell = (temp >> pos) & 1;
                        int top = (temp >> topPos) & 1;
                        int left = (temp >> leftPos) & 1;
                        int bottom = (temp >> bottomPos) & 1;
                        int right = (temp >> rightPos) & 1;
                        // Sum the values of the neighbors
                        int sum = top + left + bottom + right;
                        // Update the cell if all neighbors are 0 and the cell itself is 1
                        if (sum == 0 && cell == 1) {
                            array &= ~(1ULL << pos);
                        }
                    }
                }
                count += (init == array);
            }
            return count;
        }
        ```
    assert:
      - type: python
        value: "file://shorten_c_function_hard.py:check_c_short_and_correct"

# Persist for the web viewer
writeLatestResults: true
# Ensure caching stays on
commandLineOptions:
  cache: true