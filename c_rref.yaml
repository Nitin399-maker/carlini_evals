description: "Test if the model can rewrite a given python in C that performs reduced row echelon form (rref) on a 2D matrix."
providers:
  - {id: openrouter:anthropic/claude-3.7-sonnet, config: { max_tokens: 8192 }}

defaultTest:
  assert: []
  vars: {}

tests:
  - description: "Test if the model can rewrite a given python in C that performs reduced row echelon form (rref) on a 2D matrix."
    vars:
      prompt: |-
        Rewrite this function in C. You can assume that the input is a 2d matrix correctly formatted. Call it rref(int** matrix, int rows, int cols, int graphlen) where the size is matrix[rows][cols]. Return an int** of used_for_row.

        def rref(matrix, graphlen):
            PH = 16

            extra = 0
            col = 0
            pivots = []

            used_for_row = [set([i]) for i in range(matrix.shape[0])]
            
            matrix = matrix%PH
            while col+extra < matrix.shape[1]-1 and col < matrix.shape[0]:

                if matrix[col,col+extra] == 0:
                    if np.all(matrix[:,col] == 0):
                        extra += 1
                        continue
                    other = np.argwhere(matrix[:,col+extra] != 0).flatten()[-1]
                    if other < col:
                        extra += 1
                        continue

                    matrix[col], matrix[other] = list(matrix[other]), list(matrix[col])
                    used_for_row[col], used_for_row[other] = used_for_row[other], used_for_row[col]

                pivots.append(col+extra)
                pivot = matrix[col,col+extra]
                if col+extra < graphlen:
                    assert np.abs(pivot) == 1 or np.abs(pivot) == PH-1
                else:
                    assert np.abs(pivot) == 2 or np.abs(pivot) == PH-2
                    pivot //= 2
                matrix[col] *= pivot
                matrix[col] %= PH

                others = np.argwhere(matrix[:,col+extra]).flatten()

                for i in others:
                    if i == col: continue
                    used_for_row[i] |= used_for_row[col]
                    if col < graphlen:
                        matrix[i] -= matrix[col]*matrix[i,col+extra]
                    else:
                        while matrix[i,col+extra] != 0:
                            matrix[i] = (matrix[i]-matrix[col])%PH
                    matrix[i] %= PH
                        
                col += 1
            
            matrix = np.array(matrix)%PH
            return [sorted(x) for x in used_for_row]
        
      assert:
          - type: python
            value: "file://c_rref.py:check"

# Persist for the web viewer
writeLatestResults: true
# Ensure caching stays on
commandLineOptions:
  cache: true