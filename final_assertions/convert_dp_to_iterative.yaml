description: "Test if the model can understand a DP algorithm and then convert it into an iterative implementation."
providers:
    - openrouter:openai/gpt-4.1

defaultTest:
  assert: []
  vars: {}

tests:
  - description: "Test if the model can understand a DP algorithm and then convert it into an iterative implementation."
    vars:
      prompt: |-
        Explain what this code does. Then, convert this recursive function to an iterative one, making explicit the cubic work that's being done. The functions should return exactly the same output but the iterative one should be faster. Call your function `solve_iterative` and match the type signature of the original function and return the code in ```python literals and donot include hypen in it.

        {@lru_cache(maxsize=None)
        def solve_dp(graph, lines_left, distance_since_last):
            if len(graph) < lines_left: return 1e9, []
            if lines_left == 0 and len(graph) == 0: return 0, []

            # option 1: don't take the line
            value = (1e9, [])
            if distance_since_last < 10:
                value = min(value, solve_dp(graph[1:], lines_left, distance_since_last+1))

            # option 2: take the line
            if lines_left > 0:
                sub, how = solve_dp(graph[1:], lines_left-1, 0)
                sub += graph[0] + (distance_since_last-8)**2
                value = min(value, (sub, how + [len(graph)]))

            return value}
    assert:
      - type: python
        value: "file://convert_dp_to_iterative.py:get_assertion"

writeLatestResults: true
commandLineOptions:
  cache: true